//
//  CoreDataController.swift
//  Nomenclature
//
//  Created by VICTOR ASSELTA on 8/7/17.
//  Copyright Â© 2017 TomTheToad. All rights reserved.
//

import UIKit
import CoreData

class CoreDataController {
    
    // Fields
    let allowedKeys = ["vernacular", "kingdom", "phylum", "class", "order", "family", "genus", "species"]
    let managedObjectContext: NSManagedObjectContext = {
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            fatalError("Internal application error")
        }
        return appDelegate.persistentContainer.viewContext
    }()
    
    /* ### Helper Functions ### */
    // Get entity only necessary due to autogenerated <entityName>() apparently, still not working
    func getEntity(name: String) -> NSEntityDescription {
        guard let entity = NSEntityDescription.entity(forEntityName: name, in: managedObjectContext) else {
            fatalError("critical core data entity error")
        }
        return entity
    }
    
    /* ### Organism Functions ### */
//    func createOrganism() -> Organism {
//        let entity = getEntity(name: "Organism")
//        let organism = Organism(entity: entity, insertInto: managedObjectContext)
//        return organism
//    }
    
    // retrieve all Organims
    // TODO: search by title?
    func fetchAllOrganismsInCollection(collection: Collection) -> [Organism]? {
        var results: [Organism]?
        
        let request = NSFetchRequest<Organism>(entityName: "Organism")
        let predicate = NSPredicate(format: "withinCollection == %@", collection)
        request.predicate = predicate
        
        do {
            results = try managedObjectContext.fetch(request)
            return results
        } catch {
            print("fetchall, nothing returned")
            return nil
        }
    }
    
    func fetchOneOrganism(species: String) -> Organism? {
        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: "Organism")
        let predicate = NSPredicate(format: "species == %@", species)
        fetchRequest.predicate = predicate
        
        do {
            return try managedObjectContext.fetch(fetchRequest).first as? Organism
        } catch {
            return nil
        }
    }
    
    // create
//    func addOrganism(dict: NSDictionary, photo: Photo?, collection: Collection) -> Bool {
//        let organism = createOrganism()
//        
//        for item in dict {
//            let itemKey = String(describing: item.key)
//            
//            // Exception: if organism class name, change to sciClass as class is a reserved term
//            if itemKey == "class" || itemKey == "Class" {
//                organism.sciClass = String(describing: item.value)
//            // Exception: vernacular is transformable and will be an array, not string
//            } else if itemKey == "vernacular" {
//                guard let thisNSData = item.value as? NSObject else {
//                    fatalError("internal data error")
//                }
//                organism.setValue(thisNSData, forKey: itemKey)
//            // Else if allowed key, go ahead and set as a String
//            } else if allowedKeys.contains(itemKey){
//                organism.setValue(String(describing: item.value), forKey: itemKey)
//            }
//        }
//        
//        if let imageData = photo?.imageData {
//            organism.image = imageData
//            print("photo saved")
//        }
//        
//        collection.addToHasOrganism(organism)
//        
//        return saveData()
//    }
    
    func createOrganism(organismCard: OrganismCard) -> Bool {
        let entity = getEntity(name: "Organism")
        let organism = Organism(entity: entity, insertInto: managedObjectContext)
        
        // Set collection
        organism.withinCollection = organismCard.collection
        
        // Set taxonomic data
        organism.kingdom = organismCard.kingdom
        organism.phylum = organismCard.phylum
        organism.sciClass = organismCard.sciClass // class cannot be used so sciClass substituted
        organism.order = organismCard.order
        organism.family = organismCard.family
        organism.genus = organismCard.genus
        organism.species = organismCard.species
        
        // Set Photo
        if let photo = organismCard.photo {
            organism.image = photo.imageData
            organism.thumbnailImage = photo.thumbImageData
        }
        
//        // Set vernacular array
//        print("berfore vernacular save")
//        if let vernacular = organismCard.vernacular as NSObject? {
//            organism.vernacular = vernacular
//        }
//        print("after vernacular save")
//        return saveData()
        if let vernacularArray = organismCard.vernacular {
            for item in vernacularArray {
                let cnEntity = getEntity(name: "CommonName")
                let commonName = CommonName(entity: cnEntity, insertInto: managedObjectContext)
                commonName.name = item.name
                commonName.language = item.language
                commonName.belongsToOrganism = organism
            }
        }
        
        return saveData()
    }
    
    func removeOrganism(organism: Organism) -> Bool {
        managedObjectContext.delete(organism)
        return saveData()
    }
    
    /* ### Collection Functions ### */
    
    func createCollection(title: String, description: String) -> Collection {
        let entity = getEntity(name: "Collection")
        let newCollection = Collection(entity: entity, insertInto: managedObjectContext)
        newCollection.title = title
        newCollection.contentDescription = description
        return newCollection
    }
    
    // Retrieve all collections
    func fetchAllCollections() -> [Collection]? {
        var results: [Collection]?
        
        let request = NSFetchRequest<Collection>(entityName: "Collection")
        do {
            results = try managedObjectContext.fetch(request)
            return results
        } catch {
            print("fetchallCollections, nothing returned")
            return nil
        }
    }
    

    // save changes to core data
    func saveData() -> Bool {
        do {
            try managedObjectContext.save()
            return true
        } catch {
            print("Error: Unable to save to core data")
            return false
        }
    }

}

enum CoreDataControllerError: Error {
    case entityNoFound
}
